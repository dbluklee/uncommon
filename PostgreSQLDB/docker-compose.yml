# RAG LLM 시스템의 PostgreSQL 데이터베이스 컨테이너 설정
# 목적: 스크래핑된 제품 데이터와 이미지를 저장하는 관계형 데이터베이스
# 주요 테이블: products (제품 정보), product_images (이미지), scraping_jobs (스크래핑 작업)
services:
  postgres:
    image: postgres:16-alpine  # 경량화된 Alpine Linux 기반 PostgreSQL 16 버전
    container_name: ${POSTGRES_HOST}  # .env.global에서 정의된 컨테이너 이름
    env_file:  # 환경변수 파일 로드 순서 (뒤에 오는 것이 우선순위 높음)
      - ../.env.global  # 프로젝트 전체 공통 설정
      - .env  # PostgreSQL 전용 로커 설정
    environment:  # PostgreSQL 컨테이너 내부 환경변수 설정
      POSTGRES_DB: ${POSTGRES_DB}  # 데이터베이스 이름 (ragdb)
      POSTGRES_USER: ${POSTGRES_USER}  # 데이터베이스 사용자 (raguser)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # 데이터베이스 비밀번호
    volumes:  # Docker 볼륨 마운트 - 데이터 영속성과 초기화 스크립트
      - ${POSTGRES_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql  # 초기 테이블 생성 SQL 스크립트
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data  # 데이터 파일 영구 저장 위치
    ports:  # 네트워크 포트 매핑 - 호스트에서 PostgreSQL에 접근 가능
      - "${POSTGRES_PORT}:5432"  # 외부 포트(5434) -> 컨테이너 내부 포트(5432)
    networks:  # Docker 네트워크 연결 - 다른 서비스와 통신
      - uncommon_rag-network  # RAG 시스템 전용 네트워크
    restart: unless-stopped  # 컨테이너 자동 재시작 정책 (매뉴얼 중지 제외)
    healthcheck:  # PostgreSQL 서비스 상태 모니터링 - Docker가 자동으로 상태 확인
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]  # DB 연결 가능 여부 테스트
      interval: 10s  # 10초마다 헬스체크 실행
      timeout: 5s  # 헬스체크 명령 타임아웃 시간
      retries: 5  # 연속 실패 허용 횟수

# Docker 네트워크 설정 - RAG 시스템의 모든 컨테이너를 연결하는 가상 네트워크
networks:
  uncommon_rag-network:  # 네트워크 이름
    external: true  # 외부에서 만들어진 네트워크 사용 (start.sh에서 생성)
    name: ${NETWORK_NAME}  # .env.global에 정의된 네트워크 이름